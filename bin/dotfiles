#!/bin/bash
#
# `dotfiles` handles installation, updates, things like that. Run it periodically to make sure you're on the latest and greatest.

set -e

parentDirectory="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P)"
dotfilesDirectory="$(cd "$( dirname "${parentDirectory}" )" && pwd -P)"

source "${dotfilesDirectory}/system/logging.sh"

bold=$(tput bold)
normal=$(tput sgr0)

displayUsageAndExit() {
	echo "${bold}dotfiles -- dotfiles management${normal}"
	echo ""
	echo "Usage: dotfiles [subcommand] [arguments and options]."
	echo ""
	echo "Subcommands: add, (none)"
	echo ""
	echo "${bold}Add subcommand:${normal} Adds a symlink for a file or directory to the dotfiles directory"
	echo ""
	echo "Usage: dotfiles add <path> [options]"
	echo ""
	echo "Arguments:"
	echo "  path: The path to add to the dotfiles directory"
	echo ""
	echo "${bold}Git subcommand:${normal} Runs git in the dotfiles directory without changing current working directory"
	echo ""
	echo "Usage: dotfiles git [git arguments and options]"
	echo ""
	echo "${bold}Default with no subcommand specified:${normal} Updates system to match dotfiles directory"
	echo ""
	echo "Usage: dotfiles [options]."
	echo ""
	echo "If no options are specified, the command will ensure that the local machine is in sync with the dotfiles repository (effectively running with options -d -i -l)."
	echo ""
	echo "Options:"
	echo "  -c, --command-line-sudo-askpass  Use command line prompt to ask for sudo password"
	echo "  -d, --defaults                   Set defaults"
	echo "  -e, --edit              Open dotfiles directory for editing"
	echo "  -h, --help              Show this help message and exit"
	echo "  -i, --install           Install dependencies"
	echo "  -l, --link              Link dotfiles into the proper place"
	exit
}

# ------------------------------------------------------------------------------
# Add subcommand
# ------------------------------------------------------------------------------

if [[ "${1}" == "add" ]]; then
    if [[ ! -e "${2}" ]]; then
        echo "Error: Could not find path: ${2}"
        exit 1
    fi

    if [[ "${2}" == /* ]]; then
        # Absolute path
        path="${2}"
    else
        # Relative path
        path="$(pwd)/${2}"
    fi

    if [[ ! "${path}" == "${HOME}"/* ]]; then
        echo "Error: Path is not within home directory: ${2}"
        exit 1
    fi

    iteratorPath="${path}"
    pathSegments=()
    while [[ "${iteratorPath}" != "${HOME}" ]]; do
      if [[ -L "${iteratorPath}" ]]; then
        echo "Error: ${iteratorPath} is already a symlink"
        exit 1
      fi
      pathSegments+=("${iteratorPath}")
      iteratorPath="$(dirname "${iteratorPath}")"
    done

    cd "${dotfilesDirectory}"
    options=()
    for directory in */; do
        if [[ "${directory}" != "bin/" ]]; then
            options+=("$(basename ${directory})")
        fi
    done
    newPackage="<New package>"
    options+=("${newPackage}")

    echo "${options[@]}"

    select package in "${options[@]}"; do
        [[ -n "${package}" ]] && break
        echo ">>> Invalid Selection"
    done

    if [[ "${package}" == "${newPackage}" ]]; then
        while true; do
            read -p "What should be the name of the new package? " package
            if [[ "${package}" == *\/* || "${package}" == *\\* ]]; then
                echo "Package name cannot have a forward slash or a backward slash"
            elif [[ -z "${package}" ]]; then
                continue
            else
                break
            fi
        done
    fi

    echo "will add to this package: ${package}"

    prefix="${dotfilesDirectory}/${package}"

    mkdir -p "${prefix}"

    for (( i=${#pathSegments[@]}-1 ; i>=1 ; i-- )) ; do
        # Need to remove the leading dot due to assumptions made in link.sh
        part="$(basename "${pathSegments[i]}")"
        prefix="${prefix}/${part#.}.symlinkParent"
        mkdir -p "${prefix}"
    done

    newSource="${prefix}/$(basename "${path}")"

    cp "${path}" "${newSource}"
    rm "${path}"
    ln -s "${newSource}" "${path}"

    exit
fi

# ------------------------------------------------------------------------------
# Git subcommand
# ------------------------------------------------------------------------------

if [[ "${1}" == "git" ]]; then
    shift
    git -C "${dotfilesDirectory}" "${@}"
    exit
fi

# ------------------------------------------------------------------------------
# Default (no) subcommand
# ------------------------------------------------------------------------------

if test $# -eq 0; then
	# If no options are specified, run as if -d -i -l was called
	defaults="true"
	link="true"
	install="true"
else
	defaults="false"
	link="false"
	install="false"
fi
guiSudoAskpass="true"

while test $# -gt 0; do
	case "$1" in
		"-c"|"--command-line-sudo-askpass")
			guiSudoAskpass="false"
			;;
		"-d"|"--defaults")
			defaults="true"
			;;
		"-e"|"--edit")
			exec "${EDITOR}" "${dotfilesDirectory}"
			exit
			;;
		"-h"|"--help")
			displayUsageAndExit
			;;
		"-i"|"--install")
			install="true"
			;;
		"-l"|"--link")
			link="true"
			;;
		*)
			echo "Invalid option: ${1}"
			displayUsageAndExit
			;;
	esac
	shift
done

atExit() {
	if [ ! -z "${AT_EXIT}" ]; then
		AT_EXIT+=';'
	fi

	AT_EXIT+="${*}"
	trap "${AT_EXIT}" EXIT
}

# ------------------------------------------------------------------------------
# Check for updates
# ------------------------------------------------------------------------------

pushd "${dotfilesDirectory}" > /dev/null
echo "Updating dotfiles..."

git pull --ff-only --autostash
popd > /dev/null

# ------------------------------------------------------------------------------
# Set up GUI password dialog for sudo, if specified
# ------------------------------------------------------------------------------

if [ "${guiSudoAskpass}" == "true" ]; then
	sudoGuiAskpassScript="$(mktemp)"

	deleteSudoAskpassScript() {
		/bin/rm -f "${sudoGuiAskpassScript}"
	}

	atExit deleteSudoAskpassScript

	cat<<-'EOF' > "${sudoGuiAskpassScript}"
	#!/bin/bash
	password="$(osascript -e 'Tell application "System Events" to display dialog "dotfiles is requesting your administrator password:" default answer "" with hidden answer' -e 'text returned of result' 2> /dev/null)"
	echo "$password"
	EOF

	chmod +x "${sudoGuiAskpassScript}"
	export SUDO_ASKPASS="${sudoGuiAskpassScript}"
fi

# ------------------------------------------------------------------------------
# Set defaults
# ------------------------------------------------------------------------------

if [ "${defaults}" == "true" ]; then
	echo ""
	echo "Setting defaults..."

	# Set macOS defaults
	"${dotfilesDirectory}"/macos/set-defaults.sh

	if [ "$(basename "${SHELL}")" != "zsh" ]; then
		echo "Setting Zsh as the default shell"
		if chsh -s $(which zsh); then
			success "Zsh set as the default"
		else
			fail "Error setting zsh as the default shell"
			exit 1
		fi
	fi

	echo "Defaults set!"
fi

# ------------------------------------------------------------------------------
# Link dotfiles
# ------------------------------------------------------------------------------

if [ "${link}" == "true" ]; then
	echo ""
	echo "Linking dotfiles..."
	"${dotfilesDirectory}"/system/link.sh
fi

# ------------------------------------------------------------------------------
# Install dependencies
# ------------------------------------------------------------------------------

if [ "${install}" == "true" ]; then
	echo ""
	echo "Installing dependencies..."
	"${dotfilesDirectory}"/system/install.sh
fi

# ------------------------------------------------------------------------------
# Backup Atom packages
# ------------------------------------------------------------------------------

# TODO: check if Atom has just been freshly installed, and install packages in that case, instead
"${dotfilesDirectory}"/bin/atom-package-backup
