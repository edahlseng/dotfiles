#!/bin/sh
#
# `dot` handles installation, updates, things like that. Run it periodically to make sure you're on the latest and greatest.

set -e

parentDirectory="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P)"
dotfilesDirectory="$(cd "$( dirname "$parentDirectory" )" && pwd -P)"

source "$dotfilesDirectory/system/logging.sh"

displayUsageAndExit() {
	echo "dot -- dotfiles management"
	echo ""
	echo "Usage: dot [options]."
	echo ""
	echo "If no options are specified, the command will ensure that the local machine is in sync with the dotfiles repository (effectively running with options -d -i -l)."
	echo ""
	echo "Options:"
	echo "  -d, --defaults          Set defaults"
	echo "  -e, --edit              Open dotfiles directory for editing"
	echo "  -g, --gui-sudo-askpass  Use GUI prompt to ask for sudo password"
	echo "  -h, --help              Show this help message and exit"
	echo "  -i, --install           Install dependencies"
	echo "  -l, --link              Link dotfiles into the proper place"
	exit
}

if test $# -eq 0; then
	# If no options are specified, run as if -d -i -l was called
	defaults="true"
	link="true"
	install="true"
else
	defaults="false"
	link="false"
	install="false"
fi
guiSudoAskpass="false"

while test $# -gt 0; do
	case "$1" in
		"-d"|"--defaults")
			defaults="true"
			;;
		"-e"|"--edit")
			exec "$EDITOR" "$dotfilesDirectory"
			exit
			;;
		"-g"|"--gui-sudo-askpass")
			guiSudoAskpass="true"
			;;
		"-h"|"--help")
			displayUsageAndExit
			;;
		"-i"|"--install")
			install="true"
			;;
		"-l"|"--link")
			link="true"
			;;
		*)
			echo "Invalid option: $1"
			displayUsageAndExit
			;;
	esac
	shift
done

atExit() {
	if [ ! -z "${AT_EXIT}" ]; then
		AT_EXIT+=';'
	fi

	AT_EXIT+="${*}"
	trap "${AT_EXIT}" EXIT
}

# ------------------------------------------------------------------------------
# Set up GUI password dialog for sudo, if specified
# ------------------------------------------------------------------------------

if [ "$guiSudoAskpass" == "true" ]; then
	sudoGuiAskpassScript="$(mktemp)"

	deleteSudoAskpassScript() {
		/bin/rm -f "$sudoGuiAskpassScript"
	}

	atExit deleteSudoAskpassScript

	cat<<-'EOF' > "$sudoGuiAskpassScript"
	#!/bin/bash
	password="$(osascript -e 'Tell application "System Events" to display dialog "dotfiles is requesting your administrator password:" default answer "" with hidden answer' -e 'text returned of result' 2> /dev/null)"
	echo "$password"
	EOF

	chmod +x "$sudoGuiAskpassScript"
	export SUDO_ASKPASS="$sudoGuiAskpassScript"
fi

# ------------------------------------------------------------------------------
# Link main dotfiles directory
# ------------------------------------------------------------------------------

if [ ! -e ~/.dotfiles ]; then
	ln -s "$dotfilesDirectory" ~/.dotfiles
fi

# ------------------------------------------------------------------------------
# Set defaults
# ------------------------------------------------------------------------------

if [ "$defaults" == "true" ]; then
	echo ""
	echo "Setting defaults..."

	# Set macOS defaults
	"$dotfilesDirectory"/macos/set-defaults.sh

	if [ "$(basename "$SHELL")" != "zsh" ]; then
		echo "Setting Zsh as the default shell"
		if chsh -s $(which zsh); then
			success "Zsh set as the default"
		else
			fail "Error setting zsh as the default shell"
			exit 1
		fi
	fi

	echo "Defaults set!"
fi

# ------------------------------------------------------------------------------
# Link dotfiles
# ------------------------------------------------------------------------------

if [ "$link" == "true" ]; then
	echo ""
	echo "Linking dotfiles..."
	"$dotfilesDirectory"/system/link.sh
fi

# ------------------------------------------------------------------------------
# Install dependencies
# ------------------------------------------------------------------------------

if [ "$install" == "true" ]; then
	echo ""
	echo "Installing dependencies..."
	"$dotfilesDirectory"/system/install.sh
fi

# ------------------------------------------------------------------------------
# Backup Atom packages
# ------------------------------------------------------------------------------

# TODO: check if Atom has just been freshly installed, and install packages in that case, instead
"$dotfilesDirectory"/bin/atom-package-backup
