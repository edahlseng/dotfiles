// Add any auto-loaded Atom code on init here.

function consumeVimModePlusService(callback) {
  const consume = (pack) => callback(pack.mainModule.provideVimModePlus())

  const pack = atom.packages.getActivePackage('vim-mode-plus')
  if (pack) {
    consume(pack)
  } else {
    const disposable = atom.packages.onDidActivatePackage(pack => {
      if (pack.name === 'vim-mode-plus') {
        disposable.dispose()
        consume(pack)
      }
    })
  }
}


consumeVimModePlusService(service => {
  class DeleteWithBlackholeRegister extends service.getClass("Delete") {
    execute() {
      this.vimState.register.name = "_"
      super.execute()
    }
  }
  DeleteWithBlackholeRegister.commandPrefix = "vim-mode-plus-user"
  DeleteWithBlackholeRegister.registerCommand()
})

const nth = n => x => x instanceof Array ? x[n] : undefined;
const prop = p => x => typeof x === 'object' ? x[p] : undefined;
const find = f => x => x.find(f);
const maybe = f => x => x === null || x === undefined ? x : f(x);

const getTreeView = () => nth(0)(atom.workspace.getLeftDock().getPaneItems().filter(paneItem => paneItem.constructor.name === 'TreeView'));
const getSelectedEntry = () => prop('lastFocusedEntry')(getTreeView());

atom.commands.add('.tree-view', 'custom:move-selected-entry-to-top', () =>
    maybe(x => x.scrollIntoView({ block: 'start', inline: 'start' }))(getSelectedEntry())
)

atom.commands.add('.tree-view', 'custom:move-selected-entry-to-center', () =>
    maybe(x => x.scrollIntoView({ block: 'center', inline: 'start' }))(getSelectedEntry())
)

atom.commands.add('.tree-view', 'custom:move-selected-entry-to-bottom', () =>
    maybe(x => x.scrollIntoView({ block: 'end', inline: 'start' }))(getSelectedEntry())
)
